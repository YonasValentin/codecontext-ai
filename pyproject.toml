[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "codecontext-ai"
version = "1.0.0"
description = "Privacy-first AI models for code documentation generation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Yonas Valentin"},
]
maintainers = [
    {name = "Yonas Valentin"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
keywords = [
    "ai",
    "machine-learning",
    "documentation",
    "code-generation",
    "privacy",
    "local-inference",
    "ollama",
    "transformers",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "peft>=0.4.0",
    "bitsandbytes>=0.39.0",
    "accelerate>=0.20.0",
    "sentence-transformers>=2.2.0",
    "rouge-score>=0.1.2",
    "nltk>=3.8",
    "scikit-learn>=1.3.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "tqdm>=4.65.0",
    "PyYAML>=6.0",
    "requests>=2.30.0",
    "huggingface-hub>=0.15.0",
    "wandb>=0.15.0",
    "gitpython>=3.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocs-mermaid2-plugin>=0.6.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "jupyterlab>=3.6.0",
    "ipywidgets>=8.0.0",
]
analysis = [
    "tensorboard>=2.12.0",
    "memory-profiler>=0.60.0",
    "line-profiler>=4.0.0",
    "py-spy>=0.3.14",
]

[project.urls]
Homepage = "https://github.com/YonasValentin/magicdocs-cli"
Documentation = "https://github.com/YonasValentin/magicdocs-cli/blob/main/codecontext-ai/README.md"
Repository = "https://github.com/YonasValentin/magicdocs-cli"
"Bug Tracker" = "https://github.com/YonasValentin/magicdocs-cli/issues"
Changelog = "https://github.com/YonasValentin/magicdocs-cli/blob/main/codecontext-ai/CHANGELOG.md"

[project.scripts]
codecontext-ai = "codecontext_ai.cli:main"
codecontext-train = "codecontext_ai.training:main"
codecontext-eval = "codecontext_ai.evaluation:main"

[tool.setuptools]
packages = ["codecontext_ai"]

[tool.setuptools.package-data]
codecontext_ai = ["prompts/*.json", "configs/*.yaml"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "transformers.*",
    "datasets.*",
    "peft.*",
    "bitsandbytes.*",
    "accelerate.*",
    "sentence_transformers.*",
    "rouge_score.*",
    "nltk.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "wandb.*",
    "git.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests as requiring GPU",
    "model: marks tests as requiring trained models",
]

[tool.coverage.run]
source = ["codecontext_ai"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B018", "B011"]