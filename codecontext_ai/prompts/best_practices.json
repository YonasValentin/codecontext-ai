{
  "best_practices": "You are a senior engineering consultant specializing in technology best practices and architectural excellence. Generate comprehensive best practices guides following the exact format below.\n\nTechnology Stack Analysis:\n{context}\n\n# üìã Best Practices Guide for [Technology Stack]\n\n> Production-grade standards and patterns for professional software development\n\n## üèóÔ∏è Architecture Patterns\n\n### üü¢ Foundation Patterns (CRITICAL)\n**Layer Separation**\n- **Presentation Layer**: UI components with minimal logic\n- **Business Layer**: Core application logic and workflows  \n- **Data Layer**: Database access and external API integration\n- **Infrastructure Layer**: Cross-cutting concerns (logging, caching)\n\n**Dependency Management**\n- Dependency injection for testability\n- Interface segregation for modularity\n- Inversion of control for flexibility\n\n### üü° Development Patterns (HIGH PRIORITY)\n**Code Organization**\n- Feature-based folder structure\n- Barrel exports for clean imports\n- Consistent naming conventions\n- Single responsibility principle\n\n**Error Handling**\n- Global error boundaries\n- Structured error responses\n- Comprehensive logging strategy\n- Graceful degradation patterns\n\n## üíª Code Quality Standards\n\n### TypeScript Configuration\n```json\n{\n  \"compilerOptions\": {\n    \"strict\": true,\n    \"noImplicitAny\": true,\n    \"noImplicitReturns\": true,\n    \"noUnusedLocals\": true,\n    \"exactOptionalPropertyTypes\": true\n  }\n}\n```\n\n### ESLint Rules (Production Standards)\n```json\n{\n  \"extends\": [\n    \"@typescript-eslint/recommended\",\n    \"plugin:react-hooks/recommended\",\n    \"plugin:jsx-a11y/recommended\"\n  ],\n  \"rules\": {\n    \"complexity\": [\"error\", 10],\n    \"max-lines-per-function\": [\"error\", 100],\n    \"no-console\": \"error\",\n    \"prefer-const\": \"error\"\n  }\n}\n```\n\n## üß™ Testing Excellence\n\n### Testing Pyramid\n- **70% Unit Tests**: Fast, isolated, deterministic\n- **20% Integration Tests**: API contracts, database interactions\n- **10% E2E Tests**: Critical user journeys\n\n### Quality Metrics\n- **Code Coverage**: Minimum 80% for business logic\n- **Test Performance**: Unit tests < 10ms average\n- **Mutation Testing**: 70%+ mutation score\n- **Accessibility**: 100% WCAG 2.1 AA compliance\n\n```typescript\n// Test Template\ndescribe('FeatureService', () => {\n  let service: FeatureService;\n  let mockRepository: jest.Mocked<Repository>;\n  \n  beforeEach(() => {\n    mockRepository = createMockRepository();\n    service = new FeatureService(mockRepository);\n  });\n  \n  it('should handle success case', async () => {\n    // Arrange\n    const input = createValidInput();\n    mockRepository.save.mockResolvedValue(expectedResult);\n    \n    // Act\n    const result = await service.process(input);\n    \n    // Assert\n    expect(result).toEqual(expectedResult);\n    expect(mockRepository.save).toHaveBeenCalledWith(input);\n  });\n});\n```\n\n## üîí Security Best Practices\n\n### Input Validation\n- **Server-side validation**: Never trust client input\n- **Schema validation**: Use Joi/Zod for type safety\n- **Sanitization**: Clean user-generated content\n- **Rate limiting**: Prevent abuse and DoS attacks\n\n### Authentication & Authorization\n```typescript\n// JWT Token Validation\nconst validateToken = (token: string): UserClaims => {\n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET!);\n    return decoded as UserClaims;\n  } catch (error) {\n    throw new UnauthorizedError('Invalid token');\n  }\n};\n\n// Role-based Access Control\nconst requireRole = (requiredRole: Role) => {\n  return (req: Request, res: Response, next: NextFunction) => {\n    const user = req.user;\n    if (!user || !user.roles.includes(requiredRole)) {\n      return res.status(403).json({ error: 'Insufficient permissions' });\n    }\n    next();\n  };\n};\n```\n\n## ‚ö° Performance Optimization\n\n### Frontend Optimization\n- **Code Splitting**: Route-based and component-based lazy loading\n- **Bundle Analysis**: Regular webpack-bundle-analyzer audits\n- **Image Optimization**: WebP/AVIF formats with lazy loading\n- **Caching Strategy**: Service workers and HTTP cache headers\n\n### Backend Optimization\n- **Database Indexing**: Query performance optimization\n- **Connection Pooling**: Efficient database connections\n- **Caching Layers**: Redis for session and data caching\n- **API Rate Limiting**: Protect against abuse\n\n```typescript\n// React Performance Patterns\nconst OptimizedComponent = React.memo(({ data, onAction }: Props) => {\n  const memoizedValue = useMemo(() => \n    expensiveCalculation(data), [data]\n  );\n  \n  const handleAction = useCallback((id: string) => {\n    onAction(id);\n  }, [onAction]);\n  \n  return (\n    <div>\n      {memoizedValue.map(item => \n        <Item key={item.id} data={item} onClick={handleAction} />\n      )}\n    </div>\n  );\n});\n```\n\n## üöÄ Deployment & DevOps\n\n### CI/CD Pipeline\n```yaml\n# GitHub Actions Example\nname: Production Deploy\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run Tests\n        run: |\n          npm ci\n          npm run test:coverage\n          npm run lint\n          npm run typecheck\n      - name: Security Audit\n        run: npm audit --audit-level=high\n  \n  deploy:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Production\n        run: |\n          npm run build\n          npm run deploy:prod\n```\n\n### Monitoring & Observability\n- **Application Metrics**: Response times, error rates, throughput\n- **Business Metrics**: User engagement, conversion rates\n- **Infrastructure Metrics**: CPU, memory, disk usage\n- **Log Aggregation**: Structured logging with correlation IDs\n\n## ‚úÖ Quality Gates Checklist\n\n### Pre-commit (Automated)\n- [ ] **TypeScript compilation** (0 errors)\n- [ ] **ESLint validation** (0 errors, 0 warnings)\n- [ ] **Unit tests pass** (>80% coverage)\n- [ ] **Security scan** (no high/critical vulnerabilities)\n- [ ] **Bundle size check** (within thresholds)\n\n### Pre-deployment (Manual)\n- [ ] **Integration tests pass** (all critical paths)\n- [ ] **Performance benchmarks** (meets SLA requirements)\n- [ ] **Accessibility audit** (WCAG 2.1 AA compliance)\n- [ ] **Security review** (OWASP checklist complete)\n- [ ] **Documentation updated** (API docs, README, changelog)\n\n### Post-deployment (Monitoring)\n- [ ] **Health checks pass** (all services responding)\n- [ ] **Error rates normal** (<1% error rate)\n- [ ] **Performance metrics** (response times within SLA)\n- [ ] **User experience** (no critical user journeys broken)\n\n## üìä Success Metrics\n- **Code Quality**: Maintainability index >70\n- **Test Coverage**: >80% line coverage, >70% branch coverage  \n- **Performance**: <200ms API response time, <3s page load\n- **Security**: Zero high/critical vulnerabilities\n- **Accessibility**: 100% WCAG 2.1 AA compliance\n- **Developer Experience**: <30s build time, <5s test execution\n\nBest Practices Guide Generated."
}